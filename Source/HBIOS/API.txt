==========================
HBIOS Management Functions
==========================

SETBNK ($F0):
  B=Function                       		A=Result
  C=Bank Id					C=Previous Bank Id

GETBNK ($F1):
  B=Function                       		A=Result
						C=Bank Id

SETCPY ($F2):
  B=Function                       		A=Result
  D=Destination Bank Id
  E=Source Bank Id
  HL=Count of Bytes to Copy

BNKCPY ($F3):
  B=Function                       		A=Result
  DE=Destination Address
  HL=Source Address

ALLOC ($F4):
  B=Function                       		A=Result
  HL=Size					HL=Address of Allocated Memory Block

FREE ($F5):
  B=Function                       		A=Result
  HL=Address of Memory Block to Free

VER ($F6):
  B=Function                       		A=Result
  C=Reserved (set to 0)				DE=Version (Maj/Min/Upd/Pat)
						L=Platform Id

GET ($F7):
  BC=Function/Subfunction                       A=Result

  Subfunctions:

    CIOCNT ($00):
      BC=Function/Subfunction                   A=Result
                                                E=Serial Unit Count

    DIOCNT ($10):
      BC=Function/Subfunction                   A=Result
                                                E=Disk Unit Count

    VDACNT ($40):
      BC=Function/Subfunction                   A=Result
                                                E=Video Unit Count

    BOOTINFO ($E0):
      BC=Function/Subfunction                   A=Result
                                                L=Boot Bank Id
                                                DE=Boot Volume (Disk Unit/Slice)

    CPUINFO ($F0):
      BC=Function/Subfunction                   A=Result
                                                H=Z80 CPU Variant
                                                L=CPU Speed in MHz
                                                DE=CPU Speed in KHz

    MEMINFO ($F1):
      BC=Function/Subfunction                   A=Result
                                                D=# ROM Banks
                                                E=# RAM Banks

    BNKINFO ($F2):
      BC=Function/Subfunction                   A=Result
                                                D=BIOS Bank Id
                                                E=User Bank Id

SET ($F8):
  BC=Function/Subfunction                       A=Result

    BOOTINFO ($E0):
      BC=Function/Subfunction                   A=Result
                                                L=Boot Bank Id
                                                DE=Boot Volume (Disk Unit/Slice)

PEEK: ($F9):
  B=Function                       		A=Result
  D=Bank					E=Byte Value
  HL=Address

POKE: ($FA):
  B=Function                       		A=Result
  D=Bank
  E=Byte Value
  HL=Address

================
Serial Functions
================

IN ($00):
  BC=Function/Unit                      A=Result
                                        E=Byte Input

  Wait for a single character to be available at the specified device and return the character in E. Function
  will wait indefinitely for a character to be available.

OUT ($01):
  BC=Function/Unit                      A=Result
  E=Character to Output

  Wait for device to be ready to send a character, then send the character specified in E.

IST ($02):
  BC=Function/Unit                      A=Result
                                        *E=# Bytes Pending

OST ($03):
  BC=Function/Unit                      A=Result
                                        *E=# Buffer Bytes Available

INIT ($04):
  BC=Function/Unit                      A=Result
  DE=Line Characteristics
  L=Terminal Type?

QUERY ($05)
  BC=Function/Unit                      A=Result
                                        DE=Line Characteristics (Baud, Flow Control, etc.)
					L=Terminal Type? (TTY, VT-100, etc.)

DEVICE ($06):
  BC=Function/Unit                      A=Result
                                        D=Device Type
                                        E=Device Number
					C=Device Attributes

  Serial Device Attributes Byte:
    ;7: 1=Floppy, 0=Hard Disk (or similar, e.g. CF, SD, RAM)

                                        H=Media Type (RS-232, Terminal, etc.)
                                        L=Video Unit Id (if Media Type == VDA)

==============
Disk Functions
==============

STATUS ($10):
  BC=Function/Unit                      A=Result

  Return current status result code of specified unit.  Does not clear
  the status.

RESET ($11):
  BC=Function/Unit                      A=Result

  Reset the physical interface associated with the specified unit.  Flag all units
  associated with the interface for unit initialization at next I/O call.  Clear
  media identified unless locked.  Reset result code of all associated units.

SEEK ($12):
  BC=Function/Unit                      A=Result
  D:7=Address Type (0=CHS, 1=LBA)
  CHS: D:0-6=Head,E=Sector,HL=Track
  LBA: DE:HL

  Update target CHS or LBA for next I/O request on designated unit.
  Physical seek is typically deferred until subsequent I/O operation.

READ ($13) / WRITE ($14) / VERIFY ($15):
  BC=Function/Unit                      A=Result
  HL=Buffer Address
  E=Block Count

  Read, write, or verify sectors starting at current target sector.  Current
  target sector is incremented on each successful operation.  On error,
  target sector is sector where error occurred.

FORMAT ($16):
  BC=Function/Unit                      A=Result
  CHS: D=Head, HL=Cylinder
  E=Fill Byte

  Format the designated track using the current media_id.  Many devices
  do not support a true format operation.  If so, format should write
  sectors with designated fill byte.

  *** Need to specify interleave/sector id's somehow.

DEVICE ($17)
  BC=Function/Unit                      A=Result
                                        D=Device Type (MD, FD, IDE, etc.)
                                        E=Device Number (0..n)
					C=Device Attributes

  Report the Device Type (Floppy, IDE, SD, etc.) and Device Number.  Call
  does not perform any I/O and succeeds even if the device is in an error state.
  It does not reset the unit status.

  Disk Device Attributes Byte:
    7: 1=Floppy, 0=Hard Disk (or similar, e.g. CF, SD, RAM)
  
    If Floppy:
      6-5: Form Factor (0=8", 1=5.25", 2=3.5", 3=Other)
        4: Sides (0=SS, 1=DS)
      3-2: Density (0=SD, 1=DD, 2=HD, 3=ED)
      1-0: Reserved
  
    If Hard Disk:
        6: Removable
      5-3: Type (0=Hard, 1=CF, 2=SD, 3=USB, 4=ROM, 5=RAM, 6=RAMF, 7=?)
      2-0: Reserved
  
  Note: IDE value 848Ah in IDENTIFY DEVICE data word 0 indicates CF Card

MEDIA ($18):
  BC=Function/Unit                      A=Result
  E:0=Enable Media Discovery            E=Media ID (legacy)

  Report the media definition for media in specified unit.  If bit 0 of E is
  set, then perform media discovery or verification.  If no media in device,
  return no media error.

DEFMED ($19):
  BC=Function/Unit                      A=Result
                                        E=Media ID (legacy)

  Define media in unit.

CAPACITY ($1A):
  BC=Function/Unit                      DE:HL=Blocks on Device
                                        BC=Block Size
                                        A=Result

  Report current media capacity information.
  If media is unknown, return error (no media)

GEOMETRY ($1B):
  BC=Function/Unit                      A=Result
  					HL=Cylinders
                                        D:0-6=Heads
                                        D:7=LBA Capable
                                        E=Sectors
                                        BC=Block Size
                                        

  Report current media geometry information.
  If media is unknown, return error (no media)

===============
Video Functions
===============




-----------------------------------------------------------------------------------

Unit        Device      Type              Capacity/Mode
----------  ----------  ----------------  --------------------
Disk 0      MD0:        ROM Disk          384K, LBA
Disk 1      MD1:        RAM Disk          384K, LBA
Disk 2      FD0:        Floppy Disk       3.5", DS/HD, CHS
Disk 3      FD1:        Floppy Disk       5.25", DS/HD, CHS
Disk 4      PPIDE0:     Hard Disk         2345M, LBA
Disk 5      IDE0:       Compact Flash     2048M, LBA
Disk 6      SD0:        SD Card           4096M, LBA
Disk 7      PRPSD0:     SD Card           2048M, LBA
Disk 8      RF0:        RAM Floppy        4M, LBA
Serial 0    UART0:      RS-232            38400,8N1,HFC
Serial 1    PRPCON0:    Direct            --
Serial 2    CVDU0:      Direct            --
Serial 2    VDU0:       Direct            --
Serial 2    TMS0:       Direct            --
Video 0     PRPCON0:    VDA               Text 80x25, ANSI
Video 1     CVDU0:      VDA               Text 80x25, ANSI
Video 2     VDU0:       VDA               Text 80x25, ANSI
Video 3     TMS0:       VDA               Text 40x25, TTY

Unit: Function Group & Unit Index
Device: <driver>_DEVICE Device Type & Device Num
Type: <driver>_DEVICE Type & Attributes
Capacity/Mode:
  Disk: <driver>_DEVICE Attributes & <driver>_CAPACITY
  Serial: <driver>_QUERY
  Video: <driver>_QUERY



-----------------------------------------------------------------------------------

<VDA>_INIT:
  - INIT HARDWARE
  - ADD OURSELVES TO VDA_TBL
  - ADD OURSELVES TO CIO_TBL
  - GOTO <VDA>_VDAINIT

<VDA>_VDAINIT: (BC=FUNCTION/DEVID, HL=BITMAP ADR, D=TERMTYPE, E=VIDEO MODE)
  - CALL <VDA>_VDARESET
  - INITIALIZE EMULATION BY CALLING EMU_INIT (B=TERMTYPE, C=DEVTYPE, DE=VDADISPADR) ==> (DE=CIODISPADR)
  - SAVE DE TO <VDA>_CIODISPADR TO FORWARD SUBSEQUENT CIO FUNCTION CALLS
  - RETURN (A=STATUS)

<VDA>_VDARESET:
  - RESET HARDWARE
  - RETURN (A=STATUS)

EMU_INIT: (B=TERMTYPE, C=DEVTYPE, DE=VDADISPADR) ==> (DE=CIODISPADR)
  - GOTO TO <EMU>_INIT BASED ON VALUE IN B

<EMU>_INIT: (C=DEVTYPE, DE=VDADISPADR) ==> (DE=CIODISPADR)
  - RECORD C TO <EMU>_DEVTYPE SO <EMU>_DEVICE FUNCTION CAN RETURN IT
  - RECORD DE IN <EMU>_VDADISPADR FOR LATER USE IN CALLING PARENT VDA DRIVER
  - INITIALIZE/RESET EMULATION ENGINE
  - RETURN (A=STATUS, DE=CIODISPADR)

--------------------------

md
hdsk
rf
ide
sd
ppide
fd
prp
ppp

--------------------------

0: RAM-  RAMdrive on the Z180 SBC Mark IV board
LBASupported    UserAddressableSectors 832

1: ROM-  ROMdrive on the Z180 SBC Mark IV board
LBASupported    UserAddressableSectors 768

2: IDE-  SanDisk SDCFHSNJC-004G
s/n:       DMZ031215013440   fmw:  HDX 7.08
CHS: 7751:16:63     nSectors 7813008     MaxBlkTransfer 1
LBASupported    UserAddressableSectors 7813120

3: IDE-  SanDisk SDCFHSNJC-004G
s/n:       BKZ031215015432   fmw:  HDX 7.08
CHS: 7751:16:63     nSectors 7813008     MaxBlkTransfer 1
LBASupported    UserAddressableSectors 7813120

4:  SD-  SD  SU02G
s/n:           139401536   fmw:  8.0   d/c:  2013-07
LBASupported    UserAddressableSectors 1931264

Boot UNA unit number or ROM? [R,X,0..4] (R):

N8VEM UNA CP/M (Will Sowerbutts, 2014-08-01 git cbed09)

Unit Disk  Driver   Capacity  Slices   Start LBA  Flags
0    RAM0  Memory    416.0KB       1  0x00000000  (formatted)
1    ROM0  Memory    384.0KB       1  0x00000000
2    IDE0  Dual-IDE    3.7GB     469  0x00000000  MBR FGN
3    IDE1  Dual-IDE    3.7GB     469  0x00000000  MBR FGN
4    SD0   CSIO-SD   943.0MB       0  0x00000000  MBR FGN

Drive A: assigned to RAM0 slice 0
Drive B: assigned to ROM0 slice 0
Drive C: assigned to IDE0 slice 0
Drive D: assigned to IDE1 slice 0

Loading Residual CP/M at 0xE100 ... done.
CP/M 2.2 Copyright 1979 (c) by Digital Research

---


